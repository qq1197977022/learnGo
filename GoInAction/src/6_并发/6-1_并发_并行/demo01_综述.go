package main

import "fmt"

func main() {
	f1()
	f2()
}

func f1() {
	fmt.Println("------")
}

func f2() {
	fmt.Println("======")
}

/*
1.GO从语法和运行时直接内置了对并发的支持

2.GO的并发是指函数独立运行的能力
	1.GO会把用关键字go修饰的函数当做独立的工作单元, 调度到可用的逻辑处理器上执行
	2.GO运行时的调度器是一个复杂的软件, 管理所有goroutine并分配执行时间
		1.运行时调度器在操作系统之上, 将操作系统的线程和GO运行时的逻辑处理器绑定, 并在逻辑处理器上运行goroutine
		2.运行时调度器在任何给定时间, 都会全面控制哪个goroutine在哪个逻辑处理器上运行

3.GO的并发同步模型源自一个叫做通信顺序进程的泛型(CSP)
	1.CSP是一种消息传递模型, 通过在goroutine之间传递数据来传递消息而不是对数据进行加锁来实现同步访问
		1.用于在goroutine间同步传递数据的数据类型叫作通道(channel)
	2.经典口号: 通过通信实现共享内存, 而不是通过共享内存实现通信
*/
