package main

func main() {

}

/*
1.进程
	1.操作系统会为每个应用程序启动一个进程
	2.进程相当于一个容器, 包含应用程序所需和要维护的各种资源
		1.各种资源
			1.内存: 内存地址空间
			2.句柄:	文件和设备及操作系统的句柄
			3.线程
				1.线程是一个执行空间, 该空间会被操作系统调度到处理器上来运行函数中所写的代码
				2.每个进程至少包含一个线程, 初始线程称为主线程, 主线程结束时, 应用程序即终止, 因为执行线程的空间是应用程序本身的空间
				3.操作系统会将线程调度到某个处理器上运行, 该处理器不一定是进程所在处理器, 线程调度算法因操作系统而异, 但这种不同会被操作系统屏蔽
2.调度器
	1.操作系统调度器: 调度线程在物理处理器上运行
	2.GO运行时调度器: 调度goroutine在(和操作系统线程绑定的)GO运行时逻辑处理器上运行
3.GO运行时会为默认每个物理处理器分配一个逻辑处理器, 每个逻辑处理器都分别绑定到单个操作系统线程
*/

/*
1.并行和并发
	1.并行: 两/多个事件同一时刻发生
	2.并发: 两/多个事件同一时间间隔发生
	3.Note: 一般并发比并行效果好, 因为操作系统和硬件的总资源一般很少
2.若想goroutine并行, 必须使用>1个逻辑处理器, 此时GO运行时调度器会将goroutine平等分配到各逻辑处理器上, 这会让goroutine在不同线程上运行
	但是要想真的实现并行效果, 物理处理器个数必须>1, 否则即使GO运行时使用多个线程, goroutine依然会在同一个物理处理器上并发运行
*/
